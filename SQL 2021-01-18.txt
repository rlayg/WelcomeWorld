
--전날 복습
--EMP 테이블 전체를 조회하기
SELECT *
FROM EMP;

--EMP 테이블 속성보기
DESC EMP;

/*
SQL PLUS로 SYSTEM으로 접속
cmd - SQLPLUS - SYSTEM / orcl
scott으로 접속
CONN - SCOTT / tiger
자기가 누구인지 보는거
SHOW USER
SELECT * FROM TAB;
TAB은 테이블
*/

--사원 이름, 사원번호, 부서번호 조회
SELECT ENAME, EMPNO, DEPTNO
FROM EMP;

--사원이름과 연봉(COMM포함) AS YEAR_SAL
SELECT ENAME, (SAL*12)+COMM AS YEAR_SAL
FROM EMP;
--NULL 이 나오는 이유는 COMM이 NULL있는애가 있어서 NULL 더하면 다 NULL이 됨

--부서번호(내림차순)와 이름(오름차순)으로 정렬
SELECT DEPTNO, ENAME
FROM EMP
ORDER BY DEPTNO DESC, ENAME ;

--부서번호가 30인 사원들
SELECT *
FROM EMP
WHERE DEPTNO = 30;

--부서번호가 30이고 JOB이 SALESMAN인 사원들
SELECT *
FROM EMP
WHERE DEPTNO = 30
    AND JOB = 'SALESMAN';
    
--사원번호, 이름, 매니저(MGR), 월급이 3000이상인 사람
SELECT EMPNO, ENAME, MGR, SAL
FROM EMP
WHERE SAL >=3000;

--1234*1234의 값
SELECT 1234*1234
FROM DUAL;

--사원번호와 이름을 이름의 내림차순으로 정렬
SELECT EMPNO, ENAME
FROM EMP
ORDER BY ENAME DESC;

--부서번호가 30번이 아닌 사원정보
SELECT *
FROM EMP
WHERE DEPTNO ^= 30;
--부정을 뜻하는거 세가지 ^=, <>, !=

--부서번호가 10번, 20번, 30번인 사원 OR사용하지말고
SELECT *
FROM EMP
WHERE DEPTNO IN(10, 20, 30);

--월급이 2000이상 3000이하 사원
SELECT *
FROM EMP
WHERE SAL BETWEEN 2000 AND 3000;
/*
3000 >= SAL
AND SAL >=2000
*/

--월급이 2000미만, 3000초과인 사원
SELECT *
FROM EMP
WHERE SAL <2000
    OR SAL > 3000;
/*
WHERE SAL NOT BETWEEN 2000 AND 3000; 
*/

--이름의 첫 알파벳이 D이후인 사원. E, F, G, H.. 이런식
SELECT *
FROM EMP
WHERE ENAME > 'D';

--이름의 첫 알파벳이 D인 사원
SELECT *
FROM EMP
WHERE ENAME LIKE 'D%';

--이름의 두번째 알파벳이 D인 사원
SELECT *
FROM EMP
WHERE ENAME LIKE '_D%';

--이름에 D가 들어가있는 사원
SELECT *
FROM EMP
WHERE ENAME LIKE '%D%';

--이름에 D가 들어있지 않은 사원
SELECT *
FROM EMP
WHERE ENAME NOT LIKE '%D%';

--COMM이 없는 사원정보
SELECT *
FROM EMP
WHERE COMM IS NULL;

--COMM이 있는 사원
SELECT *
FROM EMP
WHERE COMM IS NOT NULL;

/*
사원번호, 이름, 부서번호가 10인 사원
+
사원번호, 이름, 부서번호가 20인 사원
합집합
합집합 UNION 교집합 INTERSECT 차집합 MINUS
*/
SELECT EMPNO, ENAME, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, DEPTNO
FROM EMP
WHERE DEPTNO = 20;

--이름의 길이가 5글자인 사원
SELECT *
FROM EMP
WHERE LENGTH(ENAME) = 5;

--SUBSTR() 글자추출 'HELLO'의 LL을 출력
SELECT SUBSTR('HELLO', 3, 2)
FROM DUAL;

--'HELLO'를 'HEKKO'로 바꿔
SELECT REPLACE('HELLO', 'LL', 'KK')
FROM DUAL;

--'   HELLO   '을 양 공백을 지워
SELECT TRIM('   HELLO   ')
FROM DUAL;

--'HELLO'를 10개의 글자중에서 'HELLO*****'으로 출력
SELECT RPAD('HELLO', 10, '*')
FROM DUAL;

/*
듀얼 테이블은 오라클의 최고 권한 관리자 계정인 시스 소유의 테이블로
스콧 계쩡도 사용할 수 있는 더미(DUMMY_테이블이다. 데이터 저장공간이 아닌
임시 연산
*/




--수업시작

/*
형 변환 함수의 종류
TO_CHAR 숫자 또는 날짜 데이터를 문자 데이터로 변환
TO_NUMBER 문자 데이터를 숫자 데이터로 변환
TO_DATE 문자 데이터를 날짜 데이터로 변환

형 변환 함수를 사용하면 문자를 중심으로 
숫자 또는 날짜 데이터의 변환이 가능

숫자 데이터 <-> 문자 데이터 <-> 날짜 데이터

*/

--SYSDATE 날짜 형식 지정하여 출력하기
SELECT TO_CHAR(SYSDATE, 'YYYY/MM/DD HH24:MI:SS') AS 현재날짜시간
FROM DUAL;

--월과 요일을 다양한 형식으로 출력
SELECT SYSDATE,
    TO_CHAR(SYSDATE, 'MM') AS MM,
    TO_CHAR(SYSDATE, 'MON') AS MDM,
    TO_CHAR(SYSDATE, 'MONTH') AS MONTH,
    TO_CHAR(SYSDATE, 'DD') AS DD,
    TO_CHAR(SYSDATE, 'DY') AS DY,
    TO_CHAR(SYSDATE, 'DAY') AS DAY
FROM DUAL;

--TO_NUMBER 함수로 연산하여 출력하기
SELECT TO_NUMBER('1,300', '999,999') - TO_NUMBER('1,500', '999,999')
FROM DUAL;
--9는 숫자 한자리를 의미 999,999는 6자리 9,999는 4자리

--TO_DATE 함수로 문자 데이터를 날짜 데이터 변경하기
SELECT TO_DATE('2018-07-14', 'YYYY-MM-DD') AS TODATE1,
    TO_DATE('20180714', 'YYYY-MM-DD') AS TODATE2
FROM DUAL;

--1981년 6월 1일 이후에 입사한 사원 정보 출력하기
SELECT *
FROM EMP
WHERE HIREDATE > TO_DATE('1981/06/01', 'YYYY/MM/DD');

/*
NULL 처리 함수
NVL 함수의 기본 사용법
열 또는 데이터를 입력하여 해당 데이터가 NULL이 아닐 경우
데이터를 그대로 반환하고, NULL인 경우 지정한 데이터를 반환

NVL([NULL인지 여부를 검사할 데이터 또는 열(필수)],
     [앞의 데이터가 NULL일 경우 반환할 데이터(필수)])
     
 NVL 함수는 첫 번째 입력 데이터가 NULL이 아니면 그 데이터를 그대로 반환하고 
NULL이라면 두 번째 입력 데이터에 지정한 값을 반환한다


NVL2([NULL인지 여부를 검사할 데이터 또는 열(필수)],
    [앞의 데이터가 NULL이 아닐 경우 반환할 데이터 또는 계산식(필수)],
    [앞의 데이터가 NULL일 경우 반환할 데이터 또는 계산식(필수)])

 NVL2 함수는 NVL 함수와 비슷하지만 데이터가 
NULL이 아닐 때 반환할 데이터를 추가로 지정해줄 수 있다

NVL2(데이터, 값이 있을 떄, 값이 없을 때)
*/

--NVL 함수를 사용하여 출력하기
SELECT EMPNO, ENAME, SAL, COMM, SAL+COMM,
    NVL(COMM, 0),
    SAL+NVL(COMM, 0)
FROM EMP;

--모든 사원의 이름과 연봉(COMM포함)을 조회
SELECT ENAME, SAL * 12 + NVL(COMM, 0) AS YEAR_SAL 
FROM EMP; 

--NVL2 함수 이용하여 출력
SELECT EMPNO, ENAME, COMM,
    NVL2(COMM, '0', 'X'),
    NVL2(COMM, SAL*12+COMM, SAL*12) AS ANNSAL
FROM EMP;

/*
CASE문
CASE[검사 대상이 될 열 또는 데이터, 연산이나 함수의 결과(선택)]
    WHEM[조건1] THEN[조건1의 결과 값이 TRUE일 때, 반환할 결과]
    WHEM[조건2] THEN[조건2의 결과 값이 TRUE일 때, 반환할 결과]
    ...
    WHEM[조건N] THEN[조건N의 결과 값이 TRUE일 때, 반환할 결과]
    ELSE[위 조건1~조건N과 일치하는 경우가 없을 때 반환할 결과]
END
*/
--CASE문을 사용하여 출력하기
SELECT EMPNO, ENAME, JOB, SAL,
    CASE JOB
        WHEN 'MANAGER' THEN SAL*1.1
        WHEN 'SALESMAN' THEN SAL*1.05
        WHEN 'ANALYST' THEN SAL
        ELSE SAL*1.03
END AS UPSAL
FROM EMP;
--END에 결과값이 출력

/*
다중행 함수
하나의 열에 출력 결과를 담는 다중행 함수
*/
--SUM 함수를 사용하여 급여 합계 출력
SELECT SUM(SAL)
FROM EMP;

--SUM 함수를 사용하여 사원 이름과 급여 합계 출력
SELECT ENAME, SUM(SAL)
FROM EMP;
--오류남 원래 오류 나는 예제

/*
SUM 지정한 데이터의 합 반환
COUNT 지정한 데이터의 개수 반환
MAX 지정한 데이터 중 최댓값 반환
MIN 지정한 데이터 중 최솟값 반환
AVG 지정한 데이터의 평균값 반환
*/
-- 합계를 구하는 SUM 함수
SELECT SUM(COMM)
FROM EMP;

--급여 합계 구하기 (DISTINCT, ALL 사용_)
SELECT SUM(DISTINCT SAL),
    SUM(ALL SAL),
    SUM(SAL)
FROM EMP;
--DISTINCT는 같은거 중복 없애서 값이 줄었대

--데이터 개수를 구해주는 COUNT 함수
--EMP 테이블의 데이터 개수 출력
SELECT COUNT(*)
FROM EMP;

--COUNT 함수를 사용하기 급여 개수 구하기 디스팅트 올 사용
SELECT COUNT(DISTINCT SAL),
    COUNT(ALL SAL),
    COUNT(SAL)
FROM EMP;

--COUNT 함수를 사용하여 추가 수당 열 개수 구해
SELECT COUNT(COMM)
FROM EMP;
--NULL은 카운트 안되겟지

--COUNT 함수와 IS NOT NULL을 사용하여 추가 수당 열 개수 구하기
SELECT COUNT(COMM)
FROM EMP
WHERE COMM IS NOT NULL;

--최댓값과 최솟값을 구하는 MAX, MIN 함수
--부서 번호가 10번인 사원들의 최대 급여 출력
SELECT MAX(SAL)
FROM EMP
WHERE DEPTNO = 10;

--부서 번호가 10번인 사원들의 최소 급여 출력
SELECT MIN(SAL)
FROM EMP
WHERE DEPTNO = 10;

--부서 번호가 20인 사원의 입사일 중 제일 최근 입사일 출력
SELECT MAX(HIREDATE)
FROM EMP
WHERE DEPTNO = 20;

--부서 번호가 20인 사원의 입사일 중 제일 오래된 입사일 출력
SELECT MIN(HIREDATE)
FROM EMP
WHERE DEPTNO = 20;

--평균 값을 구하는 AVG 함수

--부서 반호가 30인 사원들의 평균 급여 출력
SELECT AVG(SAL)
FROM EMP
WHERE DEPTNO= 30;




--부서번호가 30인 사원들의 평균 추가 수당을 출력
SELECT AVG(COMM)
FROM EMP
WHERE DEPTNO =30; 

--각 부서 평균 값을 구하기 위해 다음과 같이 하나하나 제작
SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 10;
SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 20;
SELECT AVG(SAL) FROM EMP WHERE DEPTNO = 30;

--집합 연산자를 다음과 같이 활용할 수 있따
SELECT AVG(SAL) , '10' AS DEPTNO
FROM EMP
WHERE E.DEPTNO = 10
UNION ALL
SELECT AVG(SAL) , '20' AS DEPTNO
FROM EMP 
WHERE DEPTNO = 20
UNION ALL
SELECT AVG(SAL) , '30' AS DEPTNO
FROM EMP
WHERE DEPTNO = 30;

/*
GROUP BY절
데이터 그룹화 : 여러 데이터에서 의미 있는 하나의 결과를 
특정 열 값별로 묶어 출력
=======================================
SELECT   [조회할 열1], [조회할 열2], ..., [열N 이름]
FROM     [조회할 테이블명]
WHERE    [조회할 행을 선별하기 위한 조건식]
GROUP BY [그룹화할 열 지정 (여러 개 가능)]
ORDER BY [정렬할 열 지정];
=======================================
유의점!?
SELECT절에서 다중행 함수를 사용하지 않은 일반 열을 GROUP BY절에 명시해야 함!
DEPTNO, JOB 모두 GROUP BY절에 등록해야지, 하나라도 안하면 오류 메세지 출력!

HAVING절 - GROUP BY절을 통해 그룹화된 결과 값의 범위를 
제한하는 데 사용
===============================
SELECT   [조회할 열1], [조회할 열2], ..., [열N 이름]
FROM     [조회할 테이블명]
WHERE    [조회할 행을 선별하기 위한 조건식]
GROUP BY [그룹화할 열 지정 (여러 개 가능)]
HAVING   [출력 그룹에 대한 조건식]
ORDER BY [정렬할 열 지정];
===============================
WHERE절 : 출력 대상 행을 제한!
HAVING절 : 그룹화된 대상을 출력에서 제한!




*/


--결과 값을 원하는 열로 묶어 출력하는 GROOUP BY 절
--그룹 바이를 사용하여 부서별 평균 급여 출력
SELECT AVG(SAL), DEPTNO
FROM EMP
GROUP BY DEPTNO;

--부서별, 직책별로 평균급여를 구하라
SELECT AVG(SAL), DEPTNO, JOB
FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO;

--GROUP BY 절을 사용하여 부서 번호별 평균 추가 수당을
--출력하도록 다음 SQL의 빈칸을 채워
SELECT AVG(COMM), DEPTNO 
FROM EMP 
GROUP BY DEPTNO; 

/*GROUP BY절에 조건을 줄 때 사용하는 HAVING절*/
--GROUP BY 절과 HAVING 절을 사용하여 출력
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
HAVING AVG(SAL)>=2000
ORDER BY DEPTNO, JOB;

/*
SELECT [조회할열1 이름], [열2 이름]
FROM [조회할 테이블 이름]
WHERE [조회할 행을 선별하는 조건식]
GROUP BY [그룹화할 열 지정(여러 개 지정
HAVING [출력 그룹을 제한하는 조건식]
ORDER BY [정렬하려는 열 지정];
*/
--WHERE 절과 HAVING 절의 차이점
--HAVING 절 대신

--WHERE절을 사용하지 않고 HAVING절만 사용할 경우
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;

--WHERE 절과 HAVING 절을 모두 사용할 경우
SELECT DEPTNO, JOB, AVG(SAL)
FROM EMP
WHERE SAL <= 3000
GROUP BY DEPTNO, JOB
HAVING AVG(SAL) >= 2000
ORDER BY DEPTNO, JOB;

/*
실행순서는 어케되냐
FROM
WHERE
GROUP BY
HAVING
SELECT
ORDER BY
*/

--WHERE절은 출력 대상 행을 제한하고, HAVING절은 그룹화된 대상을 제한

/*
그룹화와 관련된 여러 함수
ROLLUP
CUBE
*/
--기존 GROUP BY 절만 사용한 그룹화
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), AVG(SAL)
FROM EMP
GROUP BY DEPTNO, JOB
ORDER BY DEPTNO, JOB;

--ROLLUP 함수를 적용한 그룹화
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), AVG(SAL)
FROM EMP
GROUP BY ROLLUP(DEPTNO, JOB);

--CUBE 함수를 적용한 그룹화
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), AVG(SAL)
FROM EMP
GROUP BY CUBE(DEPTNO, JOB)
ORDER BY DEPTNO, JOB;

--DEPTNO를 먼저 그룹화한 후 ROLLUP 함수에 JOB 지정하기
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), AVG(SAL)
FROM EMP
GROUP BY DEPTNO, ROLLUP(JOB);

--JOB을 먼저 그룹화한 후 ROLLUP 함수에 DEPTNO 지정하기
SELECT DEPTNO, JOB, COUNT(*), MAX(SAL), AVG(SAL)
FROM EMP
GROUP BY JOB, ROLLUP(DEPTNO);

--EMP 테이블을 이용하여 부서번호, 평균급여, 최고급여, 최저급여
--사원수를 출력. 단 평균 급여를 출력할 때 소수점을 제외하고
--각 부서 번호별로 출력
SELECT DEPTNO,
    TRUNC(AVG(SAL), 0) AS AVG_SAL,
    MAX(SAL) AS MAX_SAL,
    MIN(SAL) AS MIN_SAL,
    COUNT(*) AS CNT
FROM EMP
GROUP BY DEPTNO; 

--같은 직책에 종사하는 사원이 3명 이상인 직책과 인원수를 출력
SELECT JOB, COUNT(*)
FROM EMP
GROUP BY JOB
HAVING COUNT(*) >= 3;

/*
여러 테이블을 하나의 테이블처럼 사용하는 조인
1 조인
2 조인 종류
3 SQL-99 표준 문법으로 배우는 조인
*/

--FROM 절에 여러 테이블 선언하기
SELECT *
FROM EMP, DEPT
ORDER BY EMPNO;
--이건 잘못된 정보 DEPTNO와 DEPTNO_1의 번호가 같아야 대응되는데 달라

--열 이름을 비교하는 조건식으로 조인하기
SELECT *
FROM EMP, DEPT
WHERE EMP.DEPTNO = DEPT.DEPTNO
ORDER BY EMPNO;

/*
SELECT 절의 * 사용
안좋아
어떤 순서로 출력될지 명확히 알 수 없고, 특정 열이 생기거나,
삭제로 인해 수정될 때 그 변화를 감지하고 수정이 쉽지 않기 때문
*/

/*
EMP테이블 별칭을 E로, DEPT 테이블 별칭을 D로 하여
EMP 테이블의 사원번호와 DEPT테이블의 부서 이름이 출력되도록
다음 SQL문 코드를 채워
*/
SELECT E.EMPNO, D.DNAME
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO; 

/*
조인 종류
등가 조인
등가조인(EQUI JOIN), 내부조인(INNER JOIN), 단순조인(SIMPLE JOIN)
'조인을 사용한다'는 것은 대부분 등가 조인
비등가 조인
비등가조인(NON-EQUI JOIN)
*/

SELECT E.ENAME, E.JOB, E.SAL, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
WHERE E.DEPTNO = D.DEPTNO
    AND E.SAL >= 3000;
--    AND D.DEPTNO = 30;

/*
조인 테이블 개수와 조건식 개수의 관계
조건식이 최소한 전체 테이블 수보다 하나 적은 수
테이블이 A,B,C 라면 A와 B를 연결해 줄 열 하나, 
A와 B가 연결된 상태에서 C를 연결
*/

/*
EMP테이블 별칭을 E로, DEPT 테이블 별칭은 D로 하여 다음과 같이 등가 조인을
했을 때 급여가 2500 이하고 사원 번호가 9999 이하인 사원의 정보가
출력되도록 다음 SQL문 코드를 채워라
*/

SELECT E.EMPNO, E.ENAME, E.SAL, D.DEPTNO, D.DNAME, D.LOC
FROM EMP E, DEPT D
    WHERE E.DEPTNO = D.DEPTNO
    AND E.SAL <= 2500
    AND E.EMPNO <= 9999; 


--비등가 조인
/*
각 사원 정보와 더불어 사원의 급여 등급 정보를 출력하고자 한다면
이런 경우에 BETWEEN A AND B 연산자를 사용하면 EMP테이블과
SALGRADE 테이블 조인을 손쉽게 처리할 수 있다
*/
--급여 범위를 지정하는 조건식으로 조인하기
SELECT *
FROM EMP E, SALGRADE S
WHERE E.SAL BETWEEN S.LOSAL AND S.HISAL; 

/*
자체 조인(셀프조인)
EMP 테이블에는 직속 상관의 사원 번호가 저장된 MGR열이 있다
EMP테이블의 사원 정보와 해당 사원의 직속 상관의 사원 번호를
나란히 함께 출력해야 하는 경우를 생각해보자

자체조인은 하나의 테이블을 여러 개의 테이블처럼 활용하여 조인하는
방식으로 앞에서 물리적으로 동일한 테이블 여러개를 사용할 때
발생할 수 있는 문제점을 해결한다
자체조인은 FROM절에 같은 테이블을 여러 번 명시하되 테이블의 별칭만
다르게 지정하는 방식으로 사용한다
*/
--같은 테이블을 두 번 사용하여 자체 조인하기
SELECT E1.EMPNO, E1.ENAME, E1.MGR,
    E2.EMPNO AS MGR_EMPNO,
    E2.ENAME AS MGR_ENAME
    FROM EMP E1, EMP E2
WHERE E1.MGR = E2.EMPNO;

--사원번호 이름 상관이름
SELECT E1.EMPNO, E1.ENAME, E2.ENAME 
FROM EMP E1, EMP E2 
WHERE E1.MGR = E2.EMPNO;

/*
외부 조인
조인 기준 열의 어느 한쪽이 NULL이어도 강제로 출력하는 방식
왼쪽 외부 조인(LEFT OUTER JOIN)
WHERE TABLE1.COL1 = TABLE2.COL1(+)
오른쪽 외부 조인

여기서 (+) 기호는 덤으로 덧붙여주는 의미
*/