
--연습
--EMP 테이블 전체를 조회하기
SELECT * 
FROM EMP;

--사원이름, 사원번호, 부서번호 조회
SELECT ENAME, EMPNO, DEPTNO
FROM EMP;

--부서번호를 중복없이 출력
SELECT DISTINCT DEPTNO
FROM EMP;

--사원이름과 연급여(SAL) 보너스(COMM(커미션))제외 AS..별칭넣기
SELECT ENAME, SAL*12 AS YEAR_SAL
FROM EMP;
--AS 생략 가능하지만 가급적 AS 넣기

--사원이름과 연급여(SAL) 보너스(COMM(커미션))제외 AS YEAR_SAL에서 연봉별로 정렬
--기본값은 오름차순
SELECT ENAME, SAL*12 AS YEAR_SAL
FROM EMP
ORDER BY YEAR_SAL;

--부서번호(내림차순)와 이름(오름차순)으로 정렬
SELECT EMPNO, ENAME
FROM EMP
ORDER BY EMPNO DESC, ENAME ASC;

--별칭(AS) = alias 알리아스

--부서번호가 30번인 사원들
SELECT *
FROM EMP
WHERE DEPTNO = 30;

--JOB(직책)이 'SALESMAN'인 사원들
SELECT *
FROM EMP
WHERE JOB = 'SALESMAN';
--세일즈맨은 문자열이라 ' ' 넣음

--부서번호가 30이고 JOB이 SALESMAN인 사원들
SELECT *
FROM EMP
WHERE DEPTNO = 30
AND JOB = 'SALESMAN';

--연봉이 30,000이상인 사원의 이름과 연봉
SELECT ENAME, SAL*12 AS YEAR_SAL
FROM EMP
WHERE SAL*12>=30000;

--부서번호가 20이거나 직책이 SALESMAN인 사원 정보
SELECT *
FROM EMP
WHERE DEPTNO = 20
OR JOB = 'SALESMAN';

--2023-01-17 수업

--급여가 2500 이상이고 직업이 ANALYST인 사원 정보만 나오게해
SELECT *
FROM EMP
WHERE SAL>=2500
AND JOB = 'ANALYST';

--문자를 대소 비교 연산자로 비교 - 비교문자열이 문자 하나일때
SELECT *
FROM EMP
WHERE ENAME >= 'F';

-- 문자열을 대소 비교 연산자로 비교 - 비교 문자열이 여러개일때
SELECT *
FROM EMP
WHERE ENAME <= 'FORZ';

--등가비교연산자(!=) 사용하여 출력
SELECT *
FROM EMP
WHERE SAL !=3000;

--등가비교연산자(<>) 사용하여 출력  != 와 <> 같다 
-- <>를 주로 쓴다
-- A B 값이 다를경우 TREU, 같을경우 FALSE를 반환
SELECT *
FROM EMP
WHERE SAL <> 3000;

--논리 부정 연산자 NOT 연산자 사용하여 출력 - 참거짓 반전
SELECT *
FROM EMP
WHERE NOT SAL = 3000;
--NOT 위치 확인

--IN 연산자
--직책이 MANAGER 이거나 SALESMAN 이거나 CLERK 인 사원
SELECT *
FROM EMP
WHERE JOB = 'MANAGER'
    OR JOB = 'SALESMAN'
    OR JOB = 'CLERK';

SELECT *
FROM EMP
WHERE JOB IN ('MANAGER', 'SALESMAN', 'CLERK');
--위 OR와 같다 IN 연산자 사용

-- 위 매니저 세일즈맨 클럭 아닌 사람 뽑고싶어
SELECT *
FROM EMP
WHERE JOB NOT IN ('MANAGER', 'SALESMAN', 'CLERK');

--IN 연산자를 사용하여 다음SQL문의 결과로 부서번호가
-- 10,20번인 사원 정보만 나오도록 코드 채워라
SELECT *
FROM EMP
WHERE DEPTNO IN (10, 20);

-- BETWEEN A AND B 연산자
--대소비교 연산자 
--SAL가 2000이상 3000이하인 사원이름과 급여
SELECT ENAME, SAL
FROM EMP
WHERE 3000>=SAL 
    AND SAL >=2000;

--BETWEEN A AND B 으로 하기
SELECT ENAME, SAL
FROM EMP
WHERE SAL BETWEEN 2000 AND 3000;

-- NOT BETWEEN A AND B 으로 하기
SELECT ENAME, SAL
FROM EMP
WHERE SAL NOT BETWEEN 2000 AND 3000;

--LIKE 연산자와 와일드카드
--LIKE 검색 기능 처럼 일부 문자열이 포함된 데이터 조회할 때 사용
--와일드카드 밑 예제 %같은거
--와일드카드는 두종류: _ , %
--_ 어떤 값이든 상관없이 한 개의 문자 데이터를 의미
--%:길이와 상관없이(문자 없는 경우도 포함)모든 문자 데이터를 의미

SELECT *
FROM EMP
WHERE ENAME LIKE 'S%';

--사원 이름에 AM이 포함되어 있는 사원
SELECT *
FROM EMP
WHERE ENAME LIKE '%AM%';

--사원 이름에 L이 들어있지 않은 사원들
SELECT *
FROM EMP
WHERE ENAME NOT LIKE '%L%';

--사원 이름이 두 번째 글자가 L인 사원만 출력하기
SELECT *
FROM EMP
WHERE ENAME LIKE '_L%';

--IS NULL 연산자
SELECT ENAME, SAL, SAL*12+COMM AS YEAR_SAL, COMM
FROM EMP;

--등가 비교 연산자로 NULL 비교하기
SELECT *
FROM EMP
WHERE COMM = NULL;

SELECT *
FROM EMP
WHERE COMM = 1000;

SELECT *
FROM EMP
WHERE COMM IS NULL;

--직송 상관(MANAGER)가 없는 사람들
--직송 상관(MANAGER)가 있는 사람들

SELECT *
FROM EMP
WHERE MGR IS NULL;

SELECT *
FROM EMP
WHERE MGR IS NOT NULL;

-- AND연산자와 IS NULL 연산자
SELECT *
FROM EMP
WHERE SAL > NULL
    AND COMM IS NULL;

-- OR연산자와 IS NULL 연산자
SELECT *
FROM EMP
WHERE SAL > NULL
    OR COMM IS NULL;

--집합 연산자(UNION)를 사용하여 출력
-- 합집합 = UNION

SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 20;

/*
출력 열 개수가 다를 때 : 에러
출력 열의 자료형이 다를 때 : 숫자끼리는 자료 엉킴
                          문자 숫자는 에러

*/

--집합 연산자(UNION)를 사용하여 출력하기
-- 출력 열 개수와 자료형이 같을 때
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT SAL, JOB, DEPTNO, SAL
FROM EMP
WHERE DEPTNO = 20;
--안의 데이터가 쓸모없는 데이터가 된다

--UNION ALL 중복된 값도 제거 없이 모두 출력 안중요하데 UNION만 쓴다고 함
--교집합: INTERSECT
--차집합: MINUS

--차집합 MINUS 를 사용하여 출력

SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
MINUS
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 30;

--교집합 INTERSECT 를 사용하기

SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
INTERSECT
SELECT EMPNO, ENAME, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 30;

--SAL가 2000이상 3000이하인 사원 교집합 사용
SELECT *
FROM EMP
WHERE 3000 >= SAL
INTERSECT
SELECT *
FROM EMP
WHERE SAL >= 2000;

SELECT * 
FROM EMP
WHERE SAL >= 2000
INTERSECT
SELECT * 
FROM EMP 
WHERE SAL <= 3000; 

SELECT *
FROM EMP
INTERSECT
SELECT *
FROM EMP
WHERE SAL BETWEEN 2000 AND 3000;

--EMP 테이블을 사용하여 다음과 같이 사원이름이 S로 끝나는
--사원 데이터를 모두 출력

SELECT *
FROM EMP
WHERE ENAME LIKE '%S';

--부서번호는 30 JOB은 SALESMAN인 사원의 
--사원번호 이름 직책 급여 부서번호 출력

SELECT EMPNO, ENAME, JOB, SAL, DEPTNO
FROM EMP
WHERE DEPTNO = 30
    AND JOB = 'SALESMAN';

-- 20번 30번 부서에 근무하고 있는 사원중 급여가 2000초과인 사원
SELECT *
FROM EMP
WHERE DEPTNO IN(20, 30)
    AND SAL >2000;

SELECT *
FROM EMP
WHERE DEPTNO IN(20, 30)
INTERSECT
SELECT *
FROM EMP
WHERE SAL >= 2000 ;


/*
문자 데이터를 가공하는 문자 함수
UPPER(문자열) 괄호 안의 문자 데이터를 모두 대문자로 변환하여 반환
LOWER(문자열) 괄호 안 문자 데이터를 모두 소문자로 변환하여 반환
INITCAP(문자열) 괄호 안 문자 데이터 중 첫 글자는 대문자로, 
나머지 문자는 소문자로 변환 후 반환 CAPITAL의 약자래
*/

SELECT ENAME, UPPER(ENAME), LOWER(ENAME), INITCAP(ENAME)
FROM EMP;

--스미스의 이름 대소문자 모를때 스미스의 JOB 찾기
--SELECT * 선생은 이렇게 했데
SELECT LOWER(ENAME),JOB
FROM EMP
WHERE LOWER(ENAME) = 'smith';

--선택한 열의 문자열 길이 구하기
SELECT ENAME, LENGTH(ENAME)
FROM EMP;

--이름의 길이가 5이상 구하기
SELECT ENAME, LENGTH(ENAME) AS NAMENUM
FROM EMP
WHERE LENGTH(ENAME) >=5;

/*
LENGTH 함수와 LENGTHB 함수
LENGTHB 는 바이트를 반환하는데
한글은 기본적으로 2바이트
*/
SELECT LENGTH('한글'), LENGTHB('한글')
FROM EMP;
/*
LENGTH 는 문자열 길이를 반환하기 때문에 2
LENGTHB 는 바이트 수를 반환하기 때문에 4
*/

/*
문자열 일부를 추출하는 SUBSTR 함수
SUBSTRING 의 약자

SUBSTR(문자열 데이터, 시작 위치, 추출 길이)
SUBSTR(문자열 데이터, 시작 위치) //  시작부터 끝까지 출력
*/
SELECT JOB, SUBSTR(JOB, 1, 2), SUBSTR(JOB, 3, 4), SUBSTR(JOB, 5)
FROM EMP;

--사원의 세번째 글자부터 끝까지 출력
--사원의 첫번째부터 세번째 자리까지 출력 - 이게 주로 쓰인데
SELECT JOB, SUBSTR(JOB,3)
FROM EMP;

SELECT JOB, SUBSTR(JOB, 1, 3)
FROM EMP;

/*
SUBSTR(JOB, -LENGTH(JOB))
SUBSTR(JOB, -LENGTH(JOB),2)
SUBSTR(JOB, -3)

CLERK 이 글자가 있다면
-5 -4 -3 -2 -1 이 순서
C = -5
L = -4
E = -3
R = -2
K = -1
*/
SELECT JOB,
    SUBSTR(JOB, -LENGTH(JOB)),
    SUBSTR(JOB, -LENGTH(JOB),2),
    SUBSTR(JOB, -3)
FROM EMP;
/*
첫번째 -5자리(SUBSTR(JOB, -LENGTH(JOB)))부터 끝까지 출력
두번째 -5자리(SUBSTR(JOB, -LENGTH(JOB)))부터 두글자 출력
세번째 -3자리(SUBSTR(JOB, -LENGTH(JOB)))부터 끝까지 출력
*/

/*
특정 문자 위치를 찾는 INSTR 함수

INSTR([대상 문자열 데이터(필수)],
    [위치를 찾으려는 부분 문자(필수)],
    [위치 찾기를 시작할 대상 문자열 데이터 위치(선택, 기본값은 1)],
    [시작 위치에서 찾으려는 문자가 몇 번째인지 지정(선택, 기본값은 1)])
*/
--INSTR 함수로 문자열 데이터에서 특정 문자열 찾기
SELECT 
    INSTR('HELLO, ORACLE!', 'L') AS INSTR_1,
    INSTR('HELLO, ORACLE!', 'L', 5) AS INSTR_2,
    INSTR('HELLO, ORACLE!', 'L', 2, 2) AS INSTR_3
FROM DUAL;
/*
스샷으로 더 깨끗하게 찍은거 있음
1 2 3 4 5 6 7 8 9 10 11 12 13 14
H E L L O ,   O R A  C  L  E  !

첫째: 시작 위치와 몇 번째 L인지 정해지지 않음
     처음L부터 검색
둘째: 다섯 번째 글자 O부터 L을 찾음
      5(O)부터 검색, 검색 시작 위치부터 첫 번째로 등장한 12(L)
셋째: 두 번째 글자 E부터 시작해서 두 번째 L을 찾음
      2(E)부터 검색 4(L)검색 시작 위치부터 두 번째로 등장한 L
*/

--특정 문자를 포함하고 있는 행 찾기
--INSTR 함수로 사원 이름에 문자 S가 있는 행 구하기
SELECT *
FROM EMP
WHERE INSTR(ENAME, 'S') > 0;

--LIKE 연산자로 사원 이름에 문자 S가 있는 행 구하기
SELECT *
FROM EMP
WHERE ENAME LIKE '%S%';


--오후 복습
--사원이름에 S가 있는 사원
SELECT *
FROM EMP
WHERE ENAME LIKE '%S%';

/*
REPLACE 함수
REPLACE([문자열 데이터 또는 열 이름(필수)], [찾는 문자[필수]], [대체할 문자 선택(필수)]

*/
SELECT '010-1234-5678' AS REPLACE_BEFORE,
    REPLACE('010-1234-5678', '-', ' ') AS REPLACE_1,
    REPLACE('010-1234-5678', '-', '*') AS REPLACE_2,
    REPLACE('010-1234-5678', '-') AS REPLACE_3
FROM DUAL;

/*
빈 공간을 특정 문자로 채우는 LPAD, RPAD 함수
LPAD([문자열 데이터 또는 열이름(필수)], [데이터의 빈 공간에 채울 문자(선택)])
RPAD([문자열 데이터 또는 열이름(필수)], [데이터의 빈 공간에 채울 문자(선택)])
*/

SELECT 'Oracle',
    LPAD('Oracle', 10, '#') AS LPAD_1,
    RPAD('Oracle', 10, '*') AS RPAD_1,
    LPAD('Oracle', 10) AS LPAD_2,
    RPAD('Oracle', 10) AS RPAD_2
FROM DUAL;

--RPAD 함수를 이용하여 개인정보 뒷자리
SELECT 
    RPAD('971225-', 14, '*') AS RPAD_JMNO,
    RPAD('010-1234-', 13, '*') AS RPAD_PHONE
FROM DUAL;

--CONCAT 함수  두 문자열 데이터를 합치는 함수
--두 사이에 콜론(:) 넣고 연결하디 CONCATE 약자
SELECT CONCAT(EMPNO, ENAME),
    CONCAT(EMPNO, CONCAT(' : ', ENAME))
FROM EMP
WHERE ENAME = 'SCOTT';

-- || 연산자는 CONCAT 함수와 유사하게 열이나 문자열을 연결
SELECT EMPNO||ENAME,
    EMPNO||' : '||ENAME
FROM EMP;


--공백 지우기
SELECT TRIM('   HELLO   ')
FROM DUAL;

--오른쪽 빈공백 없애기
SELECT RTRIM('   HELLO   ')
FROM DUAL;

-- 왼쪽 공백 없애기
SELECT LTRIM('   HELLO   ')
FROM DUAL;

/*
ROUND 반올림
TRUNC 버림 TRUMCATE의 약자
CEIL 올림 
FLOOR 내림
MOD 나머지 값
*/

--ROUND([숫자(필수), [반올림 위치(선택)] 반올림 후 남는 위치를 말함
SELECT ROUND(1234.5678) AS ROUND,
    ROUND(1234.5678, 0) AS ROUND_0,
    ROUND(1234.5678, 1) AS ROUND_1,
    ROUND(1234.5678, 2) AS ROUND_2,
    ROUND(1234.5678, -1) AS ROUND_MINUS1,
    ROUND(1234.5678, -2) AS ROUND_MINUS2
FROM DUAL;

--123456을 1234로 나눈 값을 소수점 이하 2번째자리까지 나타내
SELECT ROUND(123456/1234, 2) AS ROUND 
FROM DUAL; 

--버림 TRUNC([숫자(필수), [버림 위치(선택)] 버림 후 남는 위치를 말함
SELECT TRUNC(1234.5678) AS TRUNC,
    TRUNC(1234.5678, 0) AS TRUNC_0,
    TRUNC(1234.5678, 1) AS TRUNC_1,
    TRUNC(1234.5678, 2) AS TRUNC_2,
    TRUNC(1234.5678, -1) AS TRUNC_MINUS1,
    TRUNC(1234.5678, -2) AS TRUNC_MINUS2
FROM DUAL;

--CEIL 올림

SELECT CEIL(3.14),
    FLOOR(3.14),
    CEIL(-3.14),
    FLOOR(-3.14)
FROM DUAL;

--숫자를 나눈 나머지 값을 구하는 거
SELECT MOD(15, 6),
    MOD(10, 2),
    MOD(11, 2)
FROM DUAL;

/*
날짜 데이터를 다루는 날짜 함수
대표함수는 SYSDATE
별다른 입력 데이터 없이, 오라클 데이터베이스 서버가 놓인 OS
현재 날짜와 시간을 보여줌
*/
SELECT SYSDATE AS NOW,
    SYSDATE-1 AS YESTERDAY,
    SYSDATE+1 AS TOMORROW
FROM DUAL;

--SYSDATE 와 ADD_MONTHS 함수로 3개월 후 날짜 구하기
SELECT SYSDATE,
    ADD_MONTHS(SYSDATE, 3)
FROM DUAL;

--입사 10주년이 되는 사원들 데이터 출력
SELECT EMPNO, ENAME, HIREDATE,
    ADD_MONTHS(HIREDATE, 120) AS WORK10YEAR
FROM EMP;
--120개월 더한거

--개월 수 차이를 구하는 MONTHS_BETWEEN 함수
--HIREDATE와 SYSDATE 사이의 개월 수를 MONTHS_BETWEEN 함수로 출력

SELECT EMPNO, ENAME, HIREDATE, SYSDATE,
    MONTHS_BETWEEN(HIREDATE, SYSDATE) AS MONTHS1,
    MONTHS_BETWEEN(SYSDATE, HIREDATE) AS MONTH2,
    TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE)) AS MONTHS3
FROM EMP;

/*
날짜 데이터를 사용할 때 기준 포멧
CC, SCC 네 자리 연도의 끝 두 자리를 기준으로 사용
SYYYY, YYYY, YEAR, SYEAR, YYY, YY, Y 
날짜 데이터의 해당 연, 월, 일의 7월 1일 기준
*/

